import like (
	./StepCount
	./Input
)

type {
	items []Struct
	capacity uint
	sameItemSize = true
}

style {
	@ {
		baseline { start center end } / Distance
	}
	& > wrap {
		
	}
}

struct {
	wrap {
		@for item, idx in items {
			item()
		}
	}
	indicator {
		@for item in items {
			item() [ if idx == value .actived ]
		}
	}
	nav {
		left
		right
	}
}

- fn qI( s: struct key: str axis: main/cross ) style.Distance {

}

bind {
	[ value ] {
		$( wrap>item ).rmTag( 'actived' )
		$( wrap>item )[ value ].addTag( 'actived' )
		for i := 0; i < capacity; i++ {
			$(wrap>item)[ value + capacity ].addTag( 'seen' )
		}
		start := value
		end := value + capacity
		seenSec := Range{ start end }
		partSec := []uint{ start - 1 end + 1 }

		$( wrap>item:!$section ).rmTag( 'seen' )
		$( wrap>item:$section ).addTag( 'seen' )
		$( wrap>item:!nth($partSec) ).rmTag( 'partical' )
		$( wrap>item:nth($partSec) ).addTag( 'partical' )
	}
	[ capacity ] {
		cap := 0
		if sameItemSize {
			cap = uint | qI( $(&) size ) / qI( $(&>wrap) size )
		} else {
			switch style.baseline {
				case start {
					viewMSize := qI( $(&>wrap) size )
					size := 0
					for i := 0; i < len(sec); i++ {
						mS := qI( $(&>wrap>*:nth($i)) size )
						size += mS
						if( size > viewMSize ){
							break
						} else {
							cap++
						}
					}
				}
				case center {

				}
				case end {

				}
				case {
					
				}
			}
		}
		return cap;
	}
}